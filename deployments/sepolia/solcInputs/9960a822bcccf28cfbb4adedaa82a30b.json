{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//Get funds from user\n//Withdraw funds\n//Set a minimum funding value in USD\n\npragma solidity ^0.8.8;\nimport \"./PriceConverter.sol\";\n\n//custom error\nerror NotOwner();\n\ncontract FundMe {\n    uint public constant MINIMUM_USD = 50 * 1e18;\n    using PriceConverter for uint256;\n    address public immutable i_owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n\n    function fund() public payable onlyOwner {\n        //Want to be able to set a minimum fund amount in USD\n\n        //1. How do we send ETH to this contract\n        // we write msg.value.getConversionRate() instead of getConversionRate(msg.value) as msg.value acts as the first argument for any of the vaorables in the library function\n        require(\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n            \"Not enough ETH\"\n        );\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n\n        //reset the array\n        funders = new address[](0);\n\n        //withdraw the funds\n        /* 1.transfer\n           2.send\n           3.call\n        */\n        /*\n        //1.transfer\n        //msg.sender is address\n        //payable(msg.sender) is payable address\n        //throws error if fails\n        payable(msg.sender).transfer(address(this).balance);\n\n        //2.send\n        //returns boolean if failed or passed\n        bool sendStatus = payable(msg.sender).send(address(this).balance); \n        require(sendStatus, \"Send failed\");\n*/\n        //3.call\n        //lower level command\n        (bool callSuccess /*bytes memory dataReturned*/, ) = payable(msg.sender)\n            .call{value: address(this).balance}(\"\");\n        require(callSuccess, \"Send failed\");\n    }\n\n    modifier onlyOwner() {\n        // require(msg.sender==i_owner, \"Sender is not the owner!\");\n        if (msg.sender != i_owner) {\n            revert NotOwner();\n        }\n        _;\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getprice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        //ABI\n        //Address to interact\n        //0x694AA1769357215DE4FAC081bf1f309aDC325306\n\n        /* (uint80 roundId, int price, uint startedAt, uint timeStamp, uint answeredInRound)  = priceFeed.latestRoundData();*/\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        //price is the price of eth in terms of usd\n        return uint256(price * 1e10); //to adjust decimal\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getprice(priceFeed);\n        uint256 ethAmouninUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmouninUsd;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}