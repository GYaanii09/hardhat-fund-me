{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe_NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheapWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder_Address",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x374190340c1f6b3453467dfcb82580c5758a63f12576fcf661fbbd6ed75281c9",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1037634",
    "logsBloom": "0x
    "blockHash": "0x93286b1768f0ae0818663cdb0a3fd3e3a27b7661a46642f366841863ba946f98",
    "transactionHash": "0x374190340c1f6b3453467dfcb82580c5758a63f12576fcf661fbbd6ed75281c9",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1037634",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "7a450b56d5e3270a8778c1dc75f0235c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe_NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheapWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder_Address\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Siddharth Sahu\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds the contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n//Get funds from user\\n//Withdraw funds\\n//Set a minimum funding value in USD\\n\\n//Pragma\\npragma solidity ^0.8.8;\\n\\n//imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n//Error codes\\n//custom error\\nerror FundMe_NotOwner();\\n\\n/** @title A contract for crowd funding\\n * @author Siddharth Sahu\\n * @notice This contract is to demo a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    //Type declaration\\n    using PriceConverter for uint256;\\n\\n    //State variables\\n    uint public constant MINIMUM_USD = 50 * 1e18;\\n    address[] private s_funders;\\n    address private immutable i_owner;\\n    AggregatorV3Interface private s_priceFeed;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n\\n    //Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender==i_owner, \\\"Sender is not the owner!\\\");\\n        if (msg.sender != i_owner) {\\n            revert FundMe_NotOwner();\\n        }\\n        _;\\n    }\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    /*\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }*/\\n\\n    /**\\n     * @notice This function funds the contract\\n     * @dev This implements price feeds as our library\\n     */\\n    function fund() public payable onlyOwner {\\n        //Want to be able to set a minimum fund amount in USD\\n\\n        //1. How do we send ETH to this contract\\n        // we write msg.value.getConversionRate() instead of getConversionRate(msg.value) as msg.value acts as the first argument for any of the vaorables in the library function\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"Not enough ETH\\\"\\n        );\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        //reset the array\\n        s_funders = new address[](0);\\n\\n        //withdraw the funds\\n        /* 1.transfer\\n           2.send\\n           3.call\\n        */\\n        /*\\n        //1.transfer\\n        //msg.sender is address\\n        //payable(msg.sender) is payable address\\n        //throws error if fails\\n        payable(msg.sender).transfer(address(this).balance);\\n\\n        //2.send\\n        //returns boolean if failed or passed\\n        bool sendStatus = payable(msg.sender).send(address(this).balance); \\n        require(sendStatus, \\\"Send failed\\\");\\n*/\\n        //3.call\\n        //lower level command\\n        (bool callSuccess /*bytes memory dataReturned*/, ) = payable(msg.sender)\\n            .call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Send failed\\\");\\n    }\\n\\n    function cheapWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        //mappings cant be in memor\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder_Address\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder_Address];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xab0d04780cf1e43b22d83dde7f54bfa8b9d1eb0d2113d11cd77095a5c47b9334\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getprice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        //ABI\\n        //Address to interact\\n        //0x694AA1769357215DE4FAC081bf1f309aDC325306\\n\\n        /* (uint80 roundId, int price, uint startedAt, uint timeStamp, uint answeredInRound)  = priceFeed.latestRoundData();*/\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        //price is the price of eth in terms of usd\\n        return uint256(price * 1e10); //to adjust decimal\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getprice(priceFeed);\\n        uint256 ethAmouninUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmouninUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xa197aba91e5cc585245261df21bfd78810bb5ab605a2cb7c9783254f934fbb28\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012f6380380620012f6833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111696200018d600039600081816101f1015281816103e70152818161047f015281816106ce015261071e01526111696000f3fe60806040526004361061007b5760003560e01c8063893d20e81161004e578063893d20e8146101095780639e87a5cd14610134578063b60d42881461015f578063d7b4750c146101695761007b565b80630343fb2514610080578063206ddccd146100bd5780633ccfd60b146100c75780636b69a592146100de575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610af7565b6101a6565b6040516100b49190610b3d565b60405180910390f35b6100c56101ef565b005b3480156100d357600080fd5b506100dc61047d565b005b3480156100ea57600080fd5b506100f36106bd565b6040516101009190610b3d565b60405180910390f35b34801561011557600080fd5b5061011e6106ca565b60405161012b9190610b67565b60405180910390f35b34801561014057600080fd5b506101496106f2565b6040516101569190610be1565b60405180910390f35b61016761071c565b005b34801561017557600080fd5b50610190600480360381019061018b9190610c28565b6108ca565b60405161019d9190610b67565b60405180910390f35b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610274576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156102f757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116102ad575b5050505050905060005b815181101561038257600082828151811061031f5761031e610c55565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061037a90610cb3565b915050610301565b50600067ffffffffffffffff81111561039e5761039d610cfc565b5b6040519080825280602002602001820160405280156103cc5781602001602082028036833780820191505090505b50600090805190602001906103e29291906109ed565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161042990610d5c565b60006040518083038185875af1925050503d8060008114610466576040519150601f19603f3d011682016040523d82523d6000602084013e61046b565b606091505b505090508061047957600080fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610502576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156105ad57600080828154811061052757610526610c55565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806105a590610cb3565b915050610505565b50600067ffffffffffffffff8111156105c9576105c8610cfc565b5b6040519080825280602002602001820160405280156105f75781602001602082028036833780820191505090505b506000908051906020019061060d9291906109ed565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161063490610d5c565b60006040518083038185875af1925050503d8060008114610671576040519150601f19603f3d011682016040523d82523d6000602084013e610676565b606091505b50509050806106ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b190610dce565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107a1576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6802b5e3af16b18800006107e0600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461091190919063ffffffff16565b1015610821576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081890610e3a565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60008082815481106108df576108de610c55565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061091d8361094d565b90506000670de0b6b3a764000085836109369190610e5a565b6109409190610ee3565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561099657600080fd5b505afa1580156109aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ce9190610fa1565b5050509150506402540be400816109e5919061101c565b915050919050565b828054828255906000526020600020908101928215610a66579160200282015b82811115610a655782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a0d565b5b509050610a739190610a77565b5090565b5b80821115610a90576000816000905550600101610a78565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ac482610a99565b9050919050565b610ad481610ab9565b8114610adf57600080fd5b50565b600081359050610af181610acb565b92915050565b600060208284031215610b0d57610b0c610a94565b5b6000610b1b84828501610ae2565b91505092915050565b6000819050919050565b610b3781610b24565b82525050565b6000602082019050610b526000830184610b2e565b92915050565b610b6181610ab9565b82525050565b6000602082019050610b7c6000830184610b58565b92915050565b6000819050919050565b6000610ba7610ba2610b9d84610a99565b610b82565b610a99565b9050919050565b6000610bb982610b8c565b9050919050565b6000610bcb82610bae565b9050919050565b610bdb81610bc0565b82525050565b6000602082019050610bf66000830184610bd2565b92915050565b610c0581610b24565b8114610c1057600080fd5b50565b600081359050610c2281610bfc565b92915050565b600060208284031215610c3e57610c3d610a94565b5b6000610c4c84828501610c13565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cbe82610b24565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cf157610cf0610c84565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d46600083610d2b565b9150610d5182610d36565b600082019050919050565b6000610d6782610d39565b9150819050919050565b600082825260208201905092915050565b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610db8600b83610d71565b9150610dc382610d82565b602082019050919050565b60006020820190508181036000830152610de781610dab565b9050919050565b7f4e6f7420656e6f75676820455448000000000000000000000000000000000000600082015250565b6000610e24600e83610d71565b9150610e2f82610dee565b602082019050919050565b60006020820190508181036000830152610e5381610e17565b9050919050565b6000610e6582610b24565b9150610e7083610b24565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ea957610ea8610c84565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610eee82610b24565b9150610ef983610b24565b925082610f0957610f08610eb4565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f3381610f14565b8114610f3e57600080fd5b50565b600081519050610f5081610f2a565b92915050565b6000819050919050565b610f6981610f56565b8114610f7457600080fd5b50565b600081519050610f8681610f60565b92915050565b600081519050610f9b81610bfc565b92915050565b600080600080600060a08688031215610fbd57610fbc610a94565b5b6000610fcb88828901610f41565b9550506020610fdc88828901610f77565b9450506040610fed88828901610f8c565b9350506060610ffe88828901610f8c565b925050608061100f88828901610f41565b9150509295509295909350565b600061102782610f56565b915061103283610f56565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561107157611070610c84565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110ae576110ad610c84565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110eb576110ea610c84565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561112857611127610c84565b5b82820290509291505056fea2646970667358221220d34c3e161922fae05b683f894b78bf939ade3e2bb891868cdcc1839254e2347564736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063893d20e81161004e578063893d20e8146101095780639e87a5cd14610134578063b60d42881461015f578063d7b4750c146101695761007b565b80630343fb2514610080578063206ddccd146100bd5780633ccfd60b146100c75780636b69a592146100de575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610af7565b6101a6565b6040516100b49190610b3d565b60405180910390f35b6100c56101ef565b005b3480156100d357600080fd5b506100dc61047d565b005b3480156100ea57600080fd5b506100f36106bd565b6040516101009190610b3d565b60405180910390f35b34801561011557600080fd5b5061011e6106ca565b60405161012b9190610b67565b60405180910390f35b34801561014057600080fd5b506101496106f2565b6040516101569190610be1565b60405180910390f35b61016761071c565b005b34801561017557600080fd5b50610190600480360381019061018b9190610c28565b6108ca565b60405161019d9190610b67565b60405180910390f35b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610274576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156102f757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116102ad575b5050505050905060005b815181101561038257600082828151811061031f5761031e610c55565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061037a90610cb3565b915050610301565b50600067ffffffffffffffff81111561039e5761039d610cfc565b5b6040519080825280602002602001820160405280156103cc5781602001602082028036833780820191505090505b50600090805190602001906103e29291906109ed565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161042990610d5c565b60006040518083038185875af1925050503d8060008114610466576040519150601f19603f3d011682016040523d82523d6000602084013e61046b565b606091505b505090508061047957600080fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610502576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156105ad57600080828154811061052757610526610c55565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806105a590610cb3565b915050610505565b50600067ffffffffffffffff8111156105c9576105c8610cfc565b5b6040519080825280602002602001820160405280156105f75781602001602082028036833780820191505090505b506000908051906020019061060d9291906109ed565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161063490610d5c565b60006040518083038185875af1925050503d8060008114610671576040519150601f19603f3d011682016040523d82523d6000602084013e610676565b606091505b50509050806106ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b190610dce565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107a1576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6802b5e3af16b18800006107e0600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461091190919063ffffffff16565b1015610821576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081890610e3a565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60008082815481106108df576108de610c55565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061091d8361094d565b90506000670de0b6b3a764000085836109369190610e5a565b6109409190610ee3565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561099657600080fd5b505afa1580156109aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ce9190610fa1565b5050509150506402540be400816109e5919061101c565b915050919050565b828054828255906000526020600020908101928215610a66579160200282015b82811115610a655782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a0d565b5b509050610a739190610a77565b5090565b5b80821115610a90576000816000905550600101610a78565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ac482610a99565b9050919050565b610ad481610ab9565b8114610adf57600080fd5b50565b600081359050610af181610acb565b92915050565b600060208284031215610b0d57610b0c610a94565b5b6000610b1b84828501610ae2565b91505092915050565b6000819050919050565b610b3781610b24565b82525050565b6000602082019050610b526000830184610b2e565b92915050565b610b6181610ab9565b82525050565b6000602082019050610b7c6000830184610b58565b92915050565b6000819050919050565b6000610ba7610ba2610b9d84610a99565b610b82565b610a99565b9050919050565b6000610bb982610b8c565b9050919050565b6000610bcb82610bae565b9050919050565b610bdb81610bc0565b82525050565b6000602082019050610bf66000830184610bd2565b92915050565b610c0581610b24565b8114610c1057600080fd5b50565b600081359050610c2281610bfc565b92915050565b600060208284031215610c3e57610c3d610a94565b5b6000610c4c84828501610c13565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cbe82610b24565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cf157610cf0610c84565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d46600083610d2b565b9150610d5182610d36565b600082019050919050565b6000610d6782610d39565b9150819050919050565b600082825260208201905092915050565b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610db8600b83610d71565b9150610dc382610d82565b602082019050919050565b60006020820190508181036000830152610de781610dab565b9050919050565b7f4e6f7420656e6f75676820455448000000000000000000000000000000000000600082015250565b6000610e24600e83610d71565b9150610e2f82610dee565b602082019050919050565b60006020820190508181036000830152610e5381610e17565b9050919050565b6000610e6582610b24565b9150610e7083610b24565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ea957610ea8610c84565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610eee82610b24565b9150610ef983610b24565b925082610f0957610f08610eb4565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f3381610f14565b8114610f3e57600080fd5b50565b600081519050610f5081610f2a565b92915050565b6000819050919050565b610f6981610f56565b8114610f7457600080fd5b50565b600081519050610f8681610f60565b92915050565b600081519050610f9b81610bfc565b92915050565b600080600080600060a08688031215610fbd57610fbc610a94565b5b6000610fcb88828901610f41565b9550506020610fdc88828901610f77565b9450506040610fed88828901610f8c565b9350506060610ffe88828901610f8c565b925050608061100f88828901610f41565b9150509295509295909350565b600061102782610f56565b915061103283610f56565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561107157611070610c84565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110ae576110ad610c84565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110eb576110ea610c84565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561112857611127610c84565b5b82820290509291505056fea2646970667358221220d34c3e161922fae05b683f894b78bf939ade3e2bb891868cdcc1839254e2347564736f6c63430008080033",
  "devdoc": {
    "author": "Siddharth Sahu",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds the contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 68,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 72,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}